{"version":3,"sources":["canvasMask.js"],"names":["applyCanvasMask","image","mask","width","height","asBase64","document","createElement","getContext","src","bufferCanvas","buffer","outputCanvas","output","contents","imageData","alphaData","drawImage","getImageData","data","i","len","length","clearRect","putImageData","toDataURL"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;;;;;;AAWO,SAASA,eAAT,CAAyBC,KAAzB,EAAgCC,IAAhC,EAAsCC,KAAtC,EAA6CC,MAA7C,EAAqDC,QAArD,EAA+D;AACrE;AACA,MAAI,CAACC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiCC,UAAlC,IAAgD,CAACH,QAArD,EAA+D;AAC9D,WAAOJ,KAAP;AACA,GAFD,MAGK,IAAI,CAACK,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiCC,UAAlC,IAAgDH,QAApD,EAA8D;AAClE,WAAOJ,KAAK,CAACQ,GAAb;AACA;;AAED,MAAIC,YAAY,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAnB;AAAA,MACCI,MAAM,GAAGD,YAAY,CAACF,UAAb,CAAwB,IAAxB,CADV;AAAA,MAECI,YAAY,GAAGN,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAFhB;AAAA,MAGCM,MAAM,GAAGD,YAAY,CAACJ,UAAb,CAAwB,IAAxB,CAHV;AAAA,MAKCM,QAAQ,GAAG,IALZ;AAAA,MAMCC,SAAS,GAAG,IANb;AAAA,MAOCC,SAAS,GAAG,IAPb,CATqE,CAkBrE;;AACAN,EAAAA,YAAY,CAACP,KAAb,GAAqBA,KAArB;AACAO,EAAAA,YAAY,CAACN,MAAb,GAAsBA,MAAM,GAAG,CAA/B;AACAQ,EAAAA,YAAY,CAACT,KAAb,GAAqBA,KAArB;AACAS,EAAAA,YAAY,CAACR,MAAb,GAAsBA,MAAtB,CAtBqE,CAwBrE;;AACAO,EAAAA,MAAM,CAACM,SAAP,CAAiBhB,KAAjB,EAAwB,CAAxB,EAA2B,CAA3B,EAzBqE,CA2BrE;;AACAU,EAAAA,MAAM,CAACM,SAAP,CAAiBf,IAAjB,EAAuB,CAAvB,EAA0BE,MAA1B,EA5BqE,CA8BrE;;AACAU,EAAAA,QAAQ,GAAGH,MAAM,CAACO,YAAP,CAAoB,CAApB,EAAuB,CAAvB,EAA0Bf,KAA1B,EAAiCC,MAAjC,CAAX,CA/BqE,CAiCrE;;AACAW,EAAAA,SAAS,GAAGD,QAAQ,CAACK,IAArB,CAlCqE,CAoCrE;;AACAH,EAAAA,SAAS,GAAGL,MAAM,CAACO,YAAP,CAAoB,CAApB,EAAuBd,MAAvB,EAA+BD,KAA/B,EAAsCC,MAAtC,EAA8Ce,IAA1D,CArCqE,CAuCrE;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGN,SAAS,CAACO,MAAhC,EAAwCF,CAAC,GAAGC,GAA5C,EAAiDD,CAAC,GAAGA,CAAC,GAAG,CAAzD,EAA4D;AAE3D,QAAIL,SAAS,CAACK,CAAD,CAAT,GAAeJ,SAAS,CAACI,CAAD,CAA5B,EAAiC;AAChCL,MAAAA,SAAS,CAACK,CAAD,CAAT,GAAeJ,SAAS,CAACI,CAAD,CAAxB;AACA;AAED,GA9CoE,CAgDrE;;;AACA,MAAIf,QAAJ,EAAc;AACbQ,IAAAA,MAAM,CAACU,SAAP,CAAiB,CAAjB,EAAoB,CAApB,EAAuBpB,KAAvB,EAA8BC,MAA9B;AACAS,IAAAA,MAAM,CAACW,YAAP,CAAoBV,QAApB,EAA8B,CAA9B,EAAiC,CAAjC;AAEA,WAAOF,YAAY,CAACa,SAAb,EAAP;AACA,GALD,MAMK;AACJ,WAAOX,QAAP;AACA;AACD","file":"canvasMask.b3abcca2.js","sourceRoot":"..","sourcesContent":["/*\nCanvas Mask Utility v0.2\nUse HTML5 Canvas to apply an alpha mask to an image element.\n---\nhttp://github.com/benbarnett/canvas-mask\nhttp://benbarnett.net\n@benpbarnett\n---\nCopyright (c) 2011 Ben Barnett\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n---\n\n*/\n\n\n\n/**\n\t@private\n\t@name applyCanvasMask\n\t@function\n\t@description Use Canvas to apply an Alpha Mask to an <img>. Preload images first.\n\t@param {object} [image] The <img> to apply the mask\n\t@param {object} [mask] The <img> containing the PNG-24 mask image\n\t@param {int} [width] The width of the image (should be the same as the mask)\n\t@param {int} [height] The height of the image (should be the same as the mask)\n\t@param {boolean} [asBase64] Option to return the image as Base64\n*/\nexport function applyCanvasMask(image, mask, width, height, asBase64) {\n\t// check we have Canvas, and return the unmasked image if not\n\tif (!document.createElement('canvas').getContext && !asBase64) {\n\t\treturn image;\n\t}\n\telse if (!document.createElement('canvas').getContext && asBase64) {\n\t\treturn image.src;\n\t}\n\t\n\tvar bufferCanvas = document.createElement('canvas'),\n\t\tbuffer = bufferCanvas.getContext('2d'),\n\t\toutputCanvas = document.createElement('canvas'),\n\t\toutput = outputCanvas.getContext('2d'),\n\t\t\n\t\tcontents = null,\n\t\timageData = null,\n\t\talphaData = null;\n\t\t\n\t// set sizes to ensure all pixels are drawn to Canvas\n\tbufferCanvas.width = width;\n\tbufferCanvas.height = height * 2;\n\toutputCanvas.width = width;\n\toutputCanvas.height = height;\n\t\t\n\t// draw the base image\n\tbuffer.drawImage(image, 0, 0);\n\t\n\t// draw the mask directly below\n\tbuffer.drawImage(mask, 0, height);\n\n\t// grab the pixel data for base image\n\tcontents = buffer.getImageData(0, 0, width, height);\n\t\n\t// store pixel data array seperately so we can manipulate\n\timageData = contents.data;\n\t\n\t// store mask data\n\talphaData = buffer.getImageData(0, height, width, height).data;\n\t\n\t// loop through alpha mask and apply alpha values to base image\n\tfor (var i = 3, len = imageData.length; i < len; i = i + 4) {\n\n\t\tif (imageData[i] > alphaData[i]) {\n\t\t\timageData[i] = alphaData[i]\n\t\t}\n\t\t\t\n\t}\n\n\t// return the pixel data with alpha values applied\n\tif (asBase64) {\n\t\toutput.clearRect(0, 0, width, height);\n\t\toutput.putImageData(contents, 0, 0);\n\t\t\n\t\treturn outputCanvas.toDataURL();\n\t}\n\telse {\n\t\treturn contents;\t\n\t}\n}"]}